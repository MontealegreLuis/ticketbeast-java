plugins {
    id 'java-library'
    id 'java-test-fixtures'
    id 'jacoco'
    id 'maven-publish'
    id 'com.github.sherter.google-java-format' version '0.9'
    id 'info.solidsoft.pitest' version '1.7.0'
}

group = 'com.montealegreluis'
description = 'TicketBeast'

apply from: rootProject.file('hooks.gradle')

repositories {
    mavenCentral()
    maven {
        url = uri("https://maven.pkg.github.com/montealegreluis/assert")
        credentials {
            username = project.findProperty("gpr.user") ?: System.getenv("USERNAME")
            password = project.findProperty("gpr.token") ?: System.getenv("TOKEN")
        }
    }
    maven {
        url = uri("https://maven.pkg.github.com/montealegreluis/service-buses")
        credentials {
            username = project.findProperty("gpr.user") ?: System.getenv("USERNAME")
            password = project.findProperty("gpr.token") ?: System.getenv("TOKEN")
        }
    }
}

publishing {
    repositories {
        maven {
            name = "GitHubPackages"
            url = uri("https://maven.pkg.github.com/montealegreluis/ticketbeast-java")
            credentials {
                username = project.findProperty("gpr.user") ?: System.getenv("USERNAME")
                password = project.findProperty("gpr.token") ?: System.getenv("TOKEN")
            }
        }
    }
    publications {
        gpr(MavenPublication) {
            from(components.java)
        }
    }
}

dependencies {
    implementation 'com.montealegreluis:assert:1.5.0'
    implementation "com.montealegreluis:service-buses:${serviceBusesVersion}"
    implementation 'jakarta.persistence:jakarta.persistence-api:2.2.3'
    implementation 'org.springframework:spring-context:5.3.15'
    implementation 'org.springframework.data:spring-data-jpa:2.6.1'
    implementation "io.vavr:vavr:${vavrVersion}"
    api "com.stripe:stripe-java:${stripeVersion}"

    compileOnly "org.projectlombok:lombok:${lombokVersion}"
    annotationProcessor "org.projectlombok:lombok:${lombokVersion}"

    testCompileOnly "org.projectlombok:lombok:${lombokVersion}"
    testAnnotationProcessor "org.projectlombok:lombok:${lombokVersion}"

    testImplementation testFixtures("com.montealegreluis:service-buses:${serviceBusesVersion}")
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.2'
    testImplementation 'com.h2database:h2:2.1.210'
    testImplementation 'org.springframework.boot:spring-boot-starter-test:2.6.3'
    testImplementation 'org.springframework.boot:spring-boot-starter-data-jpa:2.6.3'
    testImplementation 'io.cucumber:cucumber-java:7.2.3'
    testImplementation 'io.cucumber:cucumber-junit:7.2.3'

    testFixturesCompileOnly "org.projectlombok:lombok:${lombokVersion}"
    testFixturesAnnotationProcessor "org.projectlombok:lombok:${lombokVersion}"

    testFixturesImplementation 'com.github.javafaker:javafaker:1.0.2'
    testFixturesImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.2'
    testFixturesImplementation 'jakarta.persistence:jakarta.persistence-api:2.2.3'
    testFixturesImplementation 'org.springframework.boot:spring-boot-autoconfigure:2.6.3'
    testFixturesImplementation 'org.springframework.data:spring-data-jpa:2.6.1'
    testFixturesImplementation testFixtures("com.montealegreluis:service-buses:${serviceBusesVersion}")
    testFixturesImplementation "com.stripe:stripe-java:${stripeVersion}"
    testFixturesImplementation "io.vavr:vavr:${vavrVersion}"

    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.2'
}

configurations {
    cucumberRuntime {
        extendsFrom testImplementation
    }
}

task cucumber() {
    dependsOn assemble, testClasses
    doLast {
        javaexec {
            main = "io.cucumber.core.cli.Main"
            classpath = configurations.cucumberRuntime + sourceSets.main.output + sourceSets.test.output
            args = ['--plugin', 'pretty', '--glue', 'com.montealegreluis.ticketbeast.steps', 'src/test/resources']
        }
    }
}

test {
    String tags = System.getProperty('excludeTags')
      ? System.getProperty('excludeTags')
      : 'none'
    useJUnitPlatform({ excludeTags tags })
    finalizedBy("jacocoTestReport")
}

jacocoTestReport {
    dependsOn test
    reports {
        html.destination file("${buildDir}/coverage")
    }
}

pitest {
    threads = 4
    outputFormats = ['HTML']
    timestampedReports = false
    junit5PluginVersion = '0.15'
    coverageThreshold = 95
    mutationThreshold = 96
}
